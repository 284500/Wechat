<template>
	<view>
		<!-- 顶部导航 -->
		<my-nav-bar is-show-back title="昵称" noreadnum="1">
			<my-icon-button slot="right" :icon="'\ue6fd'"></my-icon-button>
		</my-nav-bar>
		<!-- 底部导航 -->
		<view class="position-fixed left-0 right-0 border-top flex align-center"
			style="background-color: #f7f7f6;height: 105rpx;" :style="getKeyBoardHeight">
			<my-icon-button :icon="'\ue606'"></my-icon-button>
			<view class="flex-1">
				<textarea v-model="message" @focus="focus" adjust-position="false" fixed
					class="font-md p-2 bg-white rounded" style="height: 80rpx;width: 100%;"></textarea>
			</view>
			<!-- 表情 -->
			<my-icon-button :icon="'\ue605'"></my-icon-button>
			<!-- 拓展菜单 -->
			<my-icon-button v-if="!message" :icon="'\ue603'" @click="handleAction"></my-icon-button>
			<view v-else class=" main-bg-color rounded mr-2 px-2 py-1" @click="send('text')">
				<text class="font text-white">发送</text>
			</view>
		</view>
		<!-- 聊天内容区域 -->
		<scroll-view :show-scrollbar="false" scroll-y="true" class=" position-fixed left-0 right-0 bg-white"
			style="bottom: 105rpx;" :style="chatBody" :scroll-into-view="scrollIntoView">
			<!-- 聊天列表 -->
			<view v-for="(item,index) in list" :key="index" :id="'chatItem_'+index">
				<my-chat-item ref="chatItem" :index="index" :item="item" :pre-time="index>0?list[index-1].create_time:0"
					@Long="long"></my-chat-item>
			</view>

		</scroll-view>
		<!-- 消息弹出框 -->
		<my-pop-up ref="mypopup" :tabbar-height="260" :body-height="getMenuHeight" :body-width="240">
			<view style="width: 240rpx;" class="flex flex-column" :style="getMenuStyle">
				<!-- 弹窗内容 -->
				<view v-for="(item,index) in getMenuList" :key="index" hover-class="bg-hover-secondary"
					class="flex-1 align-center flex justify-center" @click="click(item.event)">
					<text class="font-md">{{item.name}}</text>
				</view>
			</view>
		</my-pop-up>
		<!-- 功能弹出框 -->
		<my-pop-up ref="action" fix-bottom @hide="KeyboardHeight=0" :mask="false">
			<!-- 扩展菜单 -->
			<view style="height: 580rpx;" class=" border-top border-light-secondary flex-column">
				<swiper :indicator-dots="actionList.length>1" class="" style="height: 510rpx;">
					<swiper-item class="flex flex-wrap" v-for="(item,index) in actionList">
						<view v-for="(item2,index2) in item" class=" col-3 flex flex-column align-center justify-center"
							style="height: 255rpx;" @click="actionEvent(item2.event)">
							<image :src="item2.icon" mode="widthFix" style="height: 100rpx;width: 100rpx;"></image>
							<text class="font-sm text-dark">{{item2.name}}</text>
						</view>
					</swiper-item>
				</swiper>
			</view>
		</my-pop-up>
	</view>
</template>

<script>
	// #ifdef APP-PLUS-NVUE
	const dom = weex.requireModle('dom')
	// #endif
	import MyPopUp from '@/compoents/my-ui/my-pop-up.vue'
	import MyChatItem from '@/compoents/my-ui/my-chat-item.vue'
	import MyAvatar from '@/compoents/my-ui/my-avatar.vue'
	import MyIconButton from '@/compoents/my-ui/my-icon-button.vue'
	import MyNavBar from '@/compoents/my-ui/my-nav-bar.vue'
	export default {
		components: {
			MyNavBar,
			MyIconButton,
			MyAvatar,
			MyChatItem,
			MyPopUp
		},
		data() {
			return {
				scrollIntoView: 'chatItem_0',
				statusBarHeight: 0,
				navBarHeight: 0, //导航栏高度
				KeyboardHeight: 0, //键盘高度
				chatIndex: -1, //聊天信息下标
				message: '', //输入文本
				mode: "text", //模式 text audio emoji action
				bianhao: 1,
				actionList: [
					[{
						name: '相册',
						icon: '/static/images/extends/pic.png',
						event: 'uploadImage'
					}, {
						name: '拍摄',
						icon: '/static/images/extends/video.png',
						event: 'uploadImage'
					}, {
						name: '收藏',
						icon: '/static/images/extends/shoucan.png',
						event: 'uploadImage'
					}, {
						name: '名片',
						icon: '/static/images/extends/man.png',
						event: 'uploadImage'
					}, {
						name: '语音通话',
						icon: '/static/images/extends/phone.png',
						event: 'uploadImage'
					}, {
						name: '视频通话',
						icon: '/static/images/extends/phone.png',
						event: 'uploadImage'
					}, {
						name: '位置',
						icon: '/static/images/extends/path.png',
						event: 'uploadImage'
					}, ]
				],
				menu: [{
						name: "复制",
						event: "copy"
					},
					{
						name: "发送给朋友",
						event: "send"
					},
					{
						name: "收藏",
						event: "send"
					},

					{
						name: "删除",
						event: "send"
					},

					{
						name: "多选",
						event: "send"
					},
					{
						name: "撤回",
						event: "removeChat"
					},


				],
				list: [{
						avatar: "/static/images/mail/friend.png",
						user_id: 1,
						nickname: "ada",
						type: "text",
						data: "哈哈哈哈哈",
						isRemove: false,
						create_time: new Date().getTime() - 1000 * 60 * 2400
					}, {
						avatar: "/static/images/mail/friend.png",
						user_id: 1,
						nickname: "ada",
						type: "text",
						data: "哈哈哈哈哈",
						isRemove: false,
						create_time: new Date().getTime() - 1000 * 1 * 60
					}, {
						avatar: "/static/images/mail/friend.png",
						user_id: 0,
						nickname: "ada",
						type: "text",
						data: "哈哈哈哈哈哈",
						isRemove: true,
						create_time: new Date().getTime() - 2 * 60 * 1000
					}, {
						avatar: "/static/images/mail/friend.png",
						user_id: 1,
						nickname: "ada",
						type: "text",
						data: "哈哈哈哈哈",
						isRemove: false,
						create_time: new Date().getTime() - 1000 * 60 * 4
					},
					{
						avatar: "/static/images/mail/friend.png",
						user_id: 1,
						nickname: "ada",
						type: "text",
						data: "哈哈哈哈哈",
						isRemove: false,
						create_time: new Date().getTime() - 1000 * 60 * 4
					},
					{
						avatar: "/static/images/mail/friend.png",
						user_id: 1,
						nickname: "ada",
						type: "text",
						data: "哈哈哈哈哈",
						isRemove: false,
						create_time: new Date().getTime() - 1000 * 60 * 4
					},
					{
						avatar: "/static/images/mail/friend.png",
						user_id: 1,
						nickname: "ada",
						type: "text",
						data: "哈哈哈哈哈",
						isRemove: false,
						create_time: new Date().getTime() - 1000 * 60 * 4
					},
					{
						avatar: "/static/images/mail/friend.png",
						user_id: 1,
						nickname: "ada",
						type: "text",
						data: "哈哈哈哈哈",
						isRemove: false,
						create_time: new Date().getTime() - 1000 * 60 * 4
					},
					{
						avatar: "/static/images/mail/friend.png",
						user_id: 0,
						nickname: "ada",
						type: "text",
						data: "哈哈哈哈哈",
						isRemove: false,
						create_time: new Date().getTime() - 1000 * 60 * 4
					},
				],
			}
		},
		methods: {
			// 点击打开拓展菜单
			handleAction() {
				this.$refs.action.show();
				this.mode = 'action';
				uni.hideKeyboard()
				//将键盘弹起
				this.KeyboardHeight = uni.upx2px(580)
				this.pageToBottom();
			},
			// 拓展菜单事件
			actionEvent(event) {
				switch (event) {
					case '  ':
						break;
				}
			},
			//发送消息
			send(type) {
				const time = new Date().getTime()
				const obj = {
					avatar: "/static/images/mail/friend.png",
					user_id: 1,
					nickname: "ada",
					type: type,
					data: "哈哈哈哈哈",
					isRemove: false,
					create_time: time
				}
				switch (type) {
					case 'text':
						obj.data = this.message;
						this.list.push(obj);

						break;
				}
				this.$nextTick(() => {
					this.pageToBottom();
				})

			},
			//跳转底部
			pageToBottom() {
				this.$nextTick(() => {
					// #ifdef APP-PLUS-NVUE
					let chatItem = this.$refs.chatItem
					let lastIndexs = chatItem.length > 0 ? chatItem.length - 1 : 0
					let last = chatItem[lastIndexs]
					if (last) {
						dom.scrollToElement(last, {})
					}
					// #endif
					// #ifndef APP-PLUS-NVUE
					console.log("1")
					let lastIndex = this.list.length - 1;
					this.scrollIntoView = 'chatItem_' + lastIndex
					// #endif
				})

			},
			//键盘事件
			focus(e) {
				this.mode = "text"
				this.pageToBottom()
				//监听键盘高度
				// uni.onKeyboardHeightChange(res => {
				// 	console.log('log', res);
				// 	this.pageToBottom()
				// })
			},
			//长按触发事件
			long({
				x,
				y,
				index
			}) {
				this.chatIndex = index;
				this.bianhao = this.list[this.chatIndex].user_id;
				// console.log(this.bianhao)
				// this.menu[1].name = this.isDoSelf ? '取消置顶' : '设置置顶';
				this.$refs.mypopup.show(x - 50, y - 20);
			},
			click(e) {
				switch (e) {
					case 'removeChat':
						//拿到当前被操作的消息
						this.list[this.chatIndex].isRemove = true
						break;
					case 'deleteChat':
						this.deleteChat();
						break;
				}
				//关闭菜单
				this.$refs.mypopup.hide();
			}
		},
		watch: {
			mode(newValue, oldValue) {
				console.log(this.mode)
				if (newValue === 'text') {
					this.$refs.action.hide()
				}
			}
		},
		computed: {
			//动态获取菜单高度
			getMenuHeight() {
				let height = 100;
				return this.getMenuList.length * height;
			},
			//动态获取菜单样式
			getMenuStyle() {
				return `height:${this.getMenuHeight}rpx;`
			},
			//获取键盘高度
			getKeyBoardHeight() {
				return `bottom:${this.KeyboardHeight}px;'`
			},
			//聊天区域bottom和top
			chatBody() {
				const bottom = uni.upx2px(105) + this.KeyboardHeight;
				return `bottom:${bottom}px;top:${this.navBarHeight}px;`
			},
			fixedStyle() {
				return `top:${this.navBarHeight}px;`
			},
			isDoSelf() {
				//id为1是本人
				const id = 1;
				return this.bianhao === id
			},
			getMenuList() {
				return this.menu.filter(v => {
					if (v.name === '撤回' && !this.isDoSelf) {
						return false
					} else {
						return true
					}
				})
			}
		},
		mounted() {
			// #ifdef APP-PLUS-NVUE
			this.statusBarHeight = plus.navigator.getStatusbarHeight();
			//#endif
			this.navBarHeight = this.statusBarHeight + uni.upx2px(90);
			//监听键盘高度
			uni.onKeyboardHeightChange(res => {
				if (this.mode !== "action") {
					this.KeyboardHeight = res.height
				}
				if (res.height > 0) {
					this.pageToBottom();
				}

			})
		}
	}
</script>

<style scoped>

</style>